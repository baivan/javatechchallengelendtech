/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package james.dtonechallenge;

import james.dtonechallenge.dao.TransactionDao;
import james.dtonechallenge.dao.TransactionDaoImpl;
import james.dtonechallenge.dao.UserDao;
import james.dtonechallenge.dao.UserDaoImpl;
import james.dtonechallenge.models.Transaction;
import james.dtonechallenge.models.User;
import james.dtonechallenge.utils.JsonTransformer;
import james.dtonechallenge.utils.Utility;
import java.util.List;
import static spark.Spark.get;
import static spark.Spark.post;

public class App {

    public static void main(String[] args) {

       
       get("/transactions/:start/:end", (req, res) -> {
            String start = req.params(":start");
            String end = req.params(":end");
             
             String auth = req.headers("authorization")==null?"":req.headers("authorization");
            String id = req.headers("profile_id")==null?"":req.headers("profile_id");
            int profileId;
            if (auth.isEmpty()) {
                return Utility.dataError("Please provide authorization token");

            }
            else if(!Utility.authenticateBearer(auth)){
                 return Utility.unauthorisedError();
            }
            if (id.isEmpty()) {
                return Utility.dataError("Your profile is empty");

            }else{
                try{
                    profileId = Integer.parseInt(id);
                    
                }
                catch (NumberFormatException e){
                                    return Utility.dataError("Invalid profile id");

                }
            }
            
            if(profileId==0){
                return Utility.dataError("Invalid profile id");
            }
             
            if(start.isEmpty()){
                return Utility.dataError("Invalid start time");
            }
            else if (end.isEmpty() && !start.isEmpty()){
                end = start;
            }
//            else if(end.isEmpty() && start.isEmpty()){
//             return Utility.dataError("Invalid time");
//            }
            res.type("application/json");
            try {

                TransactionDao transactionDao = new TransactionDaoImpl();
                List<Transaction> transactions = transactionDao.getProfileTransactionsFetchedByDate(profileId,start,end);
                return transactions;
            } catch (Exception e) {
                return Utility.serverError();
            }
        }, new JsonTransformer());

        get("/balance", (req, res) -> {
            res.type("application/json");
            String auth = req.headers("authorization")==null?"":req.headers("authorization");
            String id = req.headers("profile_id")==null?"":req.headers("profile_id");
            int profileId;
            if (auth.isEmpty()) {
                return Utility.dataError("Please provide authorization token");

            }
            else if(!Utility.authenticateBearer(auth)){
                 return Utility.unauthorisedError();
            }
            if (id.isEmpty()) {
                return Utility.dataError("Your profile is empty");

            }else{
                try{
                    profileId = Integer.parseInt(id);
                    
                }
                catch (NumberFormatException e){
                                    return Utility.dataError("Invalid profile id");

                }
            }
            
            if(profileId==0){
                return Utility.dataError("Invalid profile id");
            }
            
            try {

                UserDao userDao = new UserDaoImpl();
                User user = userDao.findById(1);
                TransactionDao transactionDao = new TransactionDaoImpl();
                List<Transaction> transactions = transactionDao.getProfileTransactions(user.getUserId());
                user.setTransactions(transactions);
                return user;
            } catch (Exception e) {
                return Utility.serverError();
            }
        }, new JsonTransformer());

        post("/profile", (req, res) -> {
            res.type("application/json");
            String auth = req.headers("authorization");
            String id = req.headers("profile_id");
            if (id == null) {
                return Utility.dataError("Invalid profile id");
            }
            int profileId = 0;
            try {
                if (id.length() <= 0) {
                    return Utility.dataError("Invalid profile id");
                }
                profileId = Integer.parseInt(id);
            } catch (NumberFormatException e) {
                e.printStackTrace();
                return Utility.serverError();
            }
            //check is user is logged in
            if (Utility.authenticateBearer(auth)) {
                try {
                    UserDao userDao = new UserDaoImpl();
                    User user = userDao.findById(profileId);

                    // TransactionDao transactionDao = new TransactionDaoImpl();
                    // List<Transaction> transactions = transactionDao.getProfileTransactions(user.getUserId());
                    //user.setTransactions(transactions);
                    return user;
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                    return Utility.serverError();
                }

            } else {
                return Utility.unauthorisedError();
            }

        }, new JsonTransformer());
       
    
    
    }

}
